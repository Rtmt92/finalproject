name: CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: ðŸš€ DÃ©ploiement
    runs-on: ubuntu-latest

    steps:
      # 1. RÃ©cupÃ©rer le code
      - name: Checkout du dÃ©pÃ´t
        uses: actions/checkout@v4

      # 2. Installer PHP & Composer pour le back
      - name: Setup PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo_mysql

      - name: Installer les dÃ©pendances backend
        run: |
          cd backend
          composer install --no-dev --optimize-autoloader

      # 3. Installer Node.js pour le front
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # 4. Installer & builder le frontend
      - name: Installer & builder le frontend
        run: |
          cd frontend
          npm ci
          # override CI Ã  false pour ne pas traiter les warnings ESLint en erreurs
          CI=false npm run build

      # 5. DÃ©ployer via SSH
      - name: DÃ©ployer sur le serveur
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # ArrÃªt dâ€™Apache (si dÃ©jÃ  lancÃ©)
            sudo systemctl stop apache2 || true

            # Synchronisation du backend
            rsync -av --delete ./backend/ $REMOTE_APP_PATH/backend/

            # Synchronisation du build frontend
            rsync -av --delete ./frontend/build/ $REMOTE_APP_PATH/frontend/

            # Ajustement des permissions
            sudo chown -R www-data:www-data $REMOTE_APP_PATH

            # RedÃ©marrage dâ€™Apache
            sudo systemctl start apache2
